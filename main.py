# /usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2023/4/8 10:14
# @Author  : luqu
# @File    : test.py
# @Description : 作为最终的主函数

import copy
import math
import time

import hash_tree
import file_process
import os
import Project
import sild_window

# ====================================处理数据集，生成编码==========================================
# d = 0.0001  # 距离阈值 10m
# d = 0.0002  # 距离阈值 20m
# d = 0.00012  # 距离阈值 12m


# d = 0.00013  # 距离阈值 13m
# d = 0.000132  # 距离阈值 13.2m
# d = 0.00014  # 距离阈值 14m
# d = 0.00015  # 距离阈值 15m
# d = 0.000156  # 距离阈值 15.6m
# d = 0.00016  # 距离阈值 16m
# d = 0.000168  # 距离阈值 16.8m
# d = 0.00018  # 距离阈值 18m
# d = 0.000192  # 距离阈值 19.2m
# d = 0.000195  # 距离阈值 19.5m
# d = 0.000196  # 距离阈值 19.6m
# d = 0.0002  # 距离阈值 20m
# d = 0.000204  # 距离阈值 20.4m
# d = 0.00021  # 距离阈值 21m
# d = 0.000224  # 距离阈值 22.4m
# d = 0.000252  # 距离阈值 25.2m
d = 0.00028  # 距离阈值 28m


# d = 0.0003  # 距离阈值 30m
# d = 0.0004  # 距离阈值 40m
# d = 0.0005  # 距离阈值 50m

# ================================编码操作=====================================
# file_list = []
# for f in range(1, 4316):
#     folder_path = fr"C:\Users\陆取\Desktop\dataset\taxi_rename\{f}.txt"
#     # folder_path = fr"C:\Users\陆取\Desktop\dataset\TDrive_rename\{f}.txt"
#     # print(folder_path)
#     file_list.append(folder_path)
# # print(file_list)
# count = 1
# for file_name in file_list:  # 逐个文件处理
#     # file_path = os.path.join(folder_path, file_name)
#     # print(f"{file_path}:")
#     print(file_name)
#     l = file_process.read_dataset(file_name)
#     l_p = file_process.process_dataset(l)[0]
#     l_it = file_process.process_dataset(l)[1]
#     # print(l_p)
#     # print(l_it)
#     # print("===================================================================")
#     f = 0
#     for dot in l_p:  # 处理一个文件中的每一个点
#         x1 = Project.project_dot(dot, Project.encrypt_vectors_m11, d)
#         x2 = Project.project_dot(dot, Project.encrypt_vectors_m11_rotate1, d)
#         # x3 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_2, d)
#         # x4 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_3, d)
#         # x5 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_4, d)
#         c = zip(x1, x2)
#         # c = zip(x1, x2, x3, x4, x5)
#         c = list(c)
#         # print(dot)
#         # print(c)
#         ans = []
#         ans_hash = []
#         for i in c:
#             temp1 = Project.HMAC_md5(Project.key, i[0])
#             temp2 = Project.HMAC_md5(Project.key, i[1])
#             # temp3 = Project.HMAC_md5(Project.key, i[2])
#             # temp4 = Project.HMAC_md5(Project.key, i[3])
#             # temp5 = Project.HMAC_md5(Project.key, i[4])
#             temp = temp1 + temp2
#             # temp = temp1 + temp2 + temp3 + temp4 + temp5
#             ans.append(temp)
#             ans_hash = copy.copy(ans)
#         # print(ans_hash)
#         for i in range(len(ans)):
#             ans[i] = int(ans[i], 16)
#         # print(f'第{f}时刻点投影后的编码集：{ans}')
#         file_process.write_code(fr'D:\A研究生\研1\实验\编码集\v=2\m=11\code_28m\code{count}', ans, f)
#         file_process.write_code(fr'D:\A研究生\研1\实验\编码集\v=2\m=11\code_hash_28m\code_hash{count}', ans_hash, f)
#         f += 1
#         # break
#     print("===================================================================")
#     print(f'{count / len(file_list) * 100}%\n')  # 统计完成情况
#     count += 1
#     # break
# print(count)

# ================================建树操作=====================================


def create_hash_tree(prime_numbers, root_key, root_values):
    """
    建树函数，就是建立根节点用的
    :param prime_numbers: 素数表
    :param root_key: 根节点的键
    :param root_values: 根节点的值
    :return: 返回建立的树
    """
    # 根据给定的素数列表创建哈希树对象
    hash_tree_name = hash_tree.HashTree(prime_numbers)
    # 获取根节点
    root_node = hash_tree_name.root
    # 设置根节点的属性
    root_node.key = root_key
    root_node.values = root_values
    root_node.occupied = True
    return hash_tree_name


def insert_hash_tree(prime_numbers):
    """
    向一个只有一个根节点的树中插入编码，完成整个索引树的建立操作
    :param prime_numbers: 素数表
    :return: None
    """
    hash_tree1 = create_hash_tree(prime_numbers, 0, ["选取的a1投影向量"])
    hash_tree2 = create_hash_tree(prime_numbers, 0, ["选取的a2投影向量"])
    hash_tree3 = create_hash_tree(prime_numbers, 0, ["选取的a3投影向量"])
    hash_tree4 = create_hash_tree(prime_numbers, 0, ["选取的a4投影向量"])
    hash_tree5 = create_hash_tree(prime_numbers, 0, ["选取的a5投影向量"])
    hash_tree6 = create_hash_tree(prime_numbers, 0, ["选取的a6投影向量"])
    hash_tree7 = create_hash_tree(prime_numbers, 0, ["选取的a7投影向量"])
    hash_tree8 = create_hash_tree(prime_numbers, 0, ["选取的a8投影向量"])
    hash_tree9 = create_hash_tree(prime_numbers, 0, ["选取的a9投影向量"])
    hash_tree10 = create_hash_tree(prime_numbers, 0, ["选取的a10投影向量"])
    hash_tree11 = create_hash_tree(prime_numbers, 0, ["选取的a11投影向量"])
    # hash_tree12 = create_hash_tree(prime_numbers, 0, ["选取的a12投影向量"])
    # hash_tree13 = create_hash_tree(prime_numbers, 0, ["选取的a13投影向量"])
    # hash_tree14 = create_hash_tree(prime_numbers, 0, ["选取的a14投影向量"])
    # tree_list = [hash_tree1, hash_tree2]  # m为2时用这个
    # tree_list = [hash_tree1, hash_tree2, hash_tree3, hash_tree4, hash_tree5]  # m为5时用这个
    # tree_list = [hash_tree1, hash_tree2, hash_tree3, hash_tree4, hash_tree5, hash_tree6, hash_tree7, hash_tree8]  # m为8时用这个
    tree_list = [hash_tree1, hash_tree2, hash_tree3, hash_tree4, hash_tree5, hash_tree6, hash_tree7, hash_tree8,
                 hash_tree9, hash_tree10, hash_tree11]  # m为11时用这个
    # tree_list = [hash_tree1, hash_tree2, hash_tree3, hash_tree4, hash_tree5, hash_tree6, hash_tree7, hash_tree8,
    #              hash_tree9, hash_tree10, hash_tree11,hash_tree12, hash_tree13, hash_tree14]  # m为11时用这个
    count = 0
    for tree in tree_list:
        for i in range(1, 4316):  # 读入一个轨迹对象并进行处理
            l_e = []  # 存放一个轨迹对象处理好后所有时间点的编码
            l = file_process.read_dataset(fr'D:\A研究生\研1\实验\编码集\v=2\m=11\code_16.8m\code{i}')  # 读取对应对象的所有时刻的编码值
            # print(l)
            for j in l:  # 对读出的一个轨迹进行处理，只要后面编码的部分
                result = j.split("：")[-1].strip()
                l_e.append(result)
            for f in range(1440):  # 这里的f为第f时刻轨迹点的编码列表，每个轨迹点列表有五个元素
                l_e[f] = l_e[f].strip("[]").replace(" ", "").split(",")  # 去出第f时刻的投影编码列表，用于下面的建树操作
                # print(l_e[f])
                temp = int(l_e[f][count].strip("'"))  # 针对第count个向量上的投影
                tree.insert(tree.root, temp, (i, f))  # i为对象，f为时刻
            print(f"完成个数{i}")
            # break
        file_process.save_hash_tree(tree, fr'D:\A研究生\研1\实验\编码集\hash_tree\m=11\d=16.8', f"tree{count + 1}")
        # tree.print_tree(tree.root)
        count += 1
        # break


# Prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]  # 开始建树
# insert_hash_tree(Prime)

# =====================================基本方案--遍历查询===============================================
# 根据查询轨迹生成查询编码 （陷门）
# l_q = file_process.read_dataset(r"C:\Users\陆取\Desktop\dataset\taxi_rename\1.txt")
# l_q_1 = file_process.process_dataset(l_q)[0]  # 存的是经纬度
# l_q_2 = file_process.process_dataset(l_q)[1]  # 存的是uuid和t
# Q = []  # 存放根据查询轨迹生成的hash码
# for dot in l_q_1:  # 对每个点进行编码操作
#     Q_temp = []
#     x1 = Project.project_dot(dot, Project.encrypt_vectors, d)
#     x2 = Project.project_dot(dot, Project.encrypt_vectors_rotate1, d)
#     c = zip(x1, x2)
#     c = list(c)
#     # print(dot)
#     # print(c)
#     hm1 = []
#     hm2 = []
#     for i in c:
#         temp1 = Project.HMAC_md5(Project.key, i[0])
#         hm1.append(temp1)
#         temp2 = Project.HMAC_md5(Project.key, i[1])
#         hm2.append(temp2)
#         temp = temp1 + temp2
#         Q_temp.append(temp)
#     Q.append(Q_temp)
# # print(Q)
# # print(Q[0])
# # print(Q[0][0])
#
# # 开始到所有对象的编码集中遍历查询
# contact_ans = []  # 用来存放最后的查询结果
# for i in range(1, 4315):  # 读一个查一个，不要一次性把所有的都读完，不然内存占用太大。
#     # l = []  # 用来存放读出来的轨迹编码
#     # l_r = []  # 用来存放处理好一个点后的编码
#     l_e = []  # 存放所有点最后处理好的编码
#     l = file_process.read_dataset(fr'C:\Users\陆取\Desktop\code_hash\code_hash{i}')  # 读取对应对象所有时刻的hash码
#     # print(l)
#     for j in l:  # 对读出的一个对象数据处理，只要后面的编码部分
#         result = j.split("：")[-1].strip()
#         l_e.append(result)
#     # print(l_e[0])
#     # print(type(l_e[0]))
#     # l_e[0] = l_e[0].strip("[]").replace("[]", "").split(",")
#     # print(l_e[0])
#     # print(l_e[0][0].strip("'"))
#     for f in range(1440):  # 这里的f为第f时刻轨迹点的编码列表，每个轨迹点列表有五个元素
#         flag = 0
#         ans = []
#         l_e[f] = l_e[f].strip("[]").replace(" ", "").split(",")
#         for f_f in range(5):  # 这里的f_f为编码集合中的第几个
#             # print(Q[f][f_f])
#             # print(l_e[f][f_f].strip("'"))
#             # print(f,f_f)
#             if Q[f][f_f] == l_e[f][f_f].strip("'"):
#                 flag = 1
#                 # print(f'第{i}个对象，第{f}时刻，集合中第{f_f}个编码一致')
#                 ans = [i, f]  # i个对象，f时刻，f_f编码一样
#                 contact_ans.append(ans)
#                 # break  #  这个地方可以优化的
#     print(f'{i / 4315 * 100}%')
#     # break
# print(contact_ans)
# contact_ans = sorted(list(set(tuple(i) for i in contact_ans)), key=lambda x: contact_ans.index(list(x)))
# print(contact_ans)
# # print(len(contact_ans))
# print("======================利用滑动窗口寻找================================")
# # contact_ans = [(1, 1387), (23, 443), (23, 445), (23, 446), (23, 447), (23, 448), (23, 449), (23, 450), (23, 451), (23, 452), (23, 453), (23, 454), (46, 279), (103, 454), (106, 447), (106, 448), (106, 449), (106, 450), (106, 451), (106, 452), (107, 442), (107, 443), (107, 444), (107, 445), (107, 446), (107, 447), (107, 448), (107, 449), (107, 450), (107, 451), (107, 452), (107, 453), (107, 454), (117, 1104), (122, 291), (124, 0), (124, 1), (124, 2), (124, 3), (124, 4), (124, 5), (124, 6), (124, 7), (124, 8), (124, 9), (124, 10), (124, 11), (124, 12), (124, 13), (124, 14), (124, 15), (124, 16), (124, 17), (124, 18), (124, 19), (124, 20), (124, 21), (124, 22), (124, 23), (124, 24), (124, 25), (124, 26), (124, 27), (124, 28), (124, 29), (124, 30), (124, 31), (124, 32), (124, 33), (124, 34), (124, 35), (124, 36), (124, 37), (124, 38), (124, 39), (124, 40), (124, 41), (124, 42), (124, 43), (124, 44), (124, 45), (124, 46), (124, 47), (124, 48), (124, 49), (124, 50), (124, 51), (124, 52), (124, 53), (124, 54), (124, 55), (124, 56), (124, 57), (124, 58), (124, 59), (124, 60), (124, 61), (124, 62), (124, 63), (124, 64), (124, 65), (124, 66), (124, 67), (124, 68), (124, 69), (124, 70), (124, 71), (124, 72), (124, 73), (124, 74), (124, 75), (124, 76), (124, 77), (124, 78), (124, 79), (124, 80), (124, 81), (124, 82), (124, 83), (124, 84), (124, 85), (124, 86), (124, 87), (124, 88), (124, 89), (124, 90), (124, 91), (124, 92), (124, 93), (124, 94), (124, 95), (124, 96), (124, 97), (124, 98), (124, 99), (124, 100), (124, 101), (124, 102), (124, 103), (124, 104), (124, 105), (124, 106), (124, 107), (124, 108), (124, 109), (124, 110), (124, 111), (124, 112), (124, 113), (124, 114), (124, 115), (124, 116), (124, 117), (124, 118), (124, 119), (124, 120), (124, 121), (124, 122), (124, 123), (124, 124), (124, 125), (124, 126), (124, 127), (124, 128), (124, 129), (124, 130), (124, 131), (124, 132), (124, 133), (124, 134), (124, 135), (124, 136), (124, 137), (124, 138), (124, 139), (124, 140), (124, 141), (124, 142), (124, 143), (124, 144), (124, 145), (124, 146), (124, 147), (124, 148), (124, 149), (124, 150), (124, 151), (124, 152), (124, 153), (124, 154), (124, 155), (124, 156), (124, 157), (124, 158), (124, 159), (124, 160), (124, 161), (124, 162), (124, 163), (124, 164), (124, 165), (124, 166), (124, 167), (124, 168), (124, 169), (124, 170), (124, 171), (124, 172), (124, 173), (124, 174), (124, 175), (124, 176), (124, 177), (124, 178), (124, 179), (124, 180), (124, 181), (124, 182), (124, 183), (124, 184), (124, 185), (124, 186), (124, 187), (124, 188), (124, 189), (124, 190), (124, 191), (124, 192), (124, 193), (124, 194), (124, 195), (124, 196), (124, 197), (124, 198), (124, 199), (124, 200), (124, 201), (124, 202), (124, 203), (124, 204), (124, 205), (124, 206), (124, 207), (124, 208), (124, 209), (124, 210), (124, 211), (124, 212), (124, 213), (124, 214), (124, 215), (124, 216), (124, 217), (124, 218), (124, 219), (124, 220), (124, 221), (124, 222), (124, 223), (124, 224), (124, 225), (124, 226), (124, 227), (124, 228), (124, 229), (124, 230), (124, 231), (124, 232), (124, 233), (124, 234), (124, 235), (124, 236), (124, 237), (124, 238), (124, 239), (124, 240), (124, 241), (124, 242), (124, 243), (124, 244), (124, 245), (124, 246), (124, 247), (124, 248), (124, 249), (124, 250), (124, 251), (124, 252), (124, 253), (124, 254), (124, 255), (124, 256), (124, 257), (124, 258), (124, 259), (124, 260), (124, 261), (124, 262), (124, 263), (124, 264), (124, 265), (124, 266), (124, 267), (124, 268), (124, 269), (124, 270), (124, 271), (124, 272), (124, 273), (124, 274), (124, 275), (124, 276), (124, 277), (124, 278), (124, 279), (124, 280), (124, 281), (124, 282), (124, 283), (124, 284), (124, 285), (124, 286), (124, 287), (124, 288), (124, 289), (124, 290), (124, 291), (124, 292), (124, 293), (124, 294), (124, 295), (124, 296), (124, 297), (124, 298), (124, 299), (124, 300), (124, 301), (124, 302), (124, 303), (124, 304), (124, 305), (124, 306), (124, 307), (124, 308), (124, 309), (124, 310), (124, 311), (124, 312), (124, 313), (124, 314), (124, 315), (124, 316), (124, 317), (124, 318), (124, 319), (124, 320), (124, 321), (124, 322), (124, 323), (124, 324), (124, 325), (124, 326), (124, 327), (124, 328), (124, 329), (124, 330), (124, 331), (124, 332), (124, 333), (124, 334), (124, 335), (124, 336), (124, 337), (124, 338), (124, 339), (124, 340), (124, 341), (124, 342), (124, 343), (124, 344), (124, 345), (124, 346), (124, 347), (124, 348), (124, 349), (124, 350), (124, 351), (124, 352), (124, 353), (124, 354), (124, 355), (124, 356), (124, 357), (124, 358), (124, 359), (124, 360), (124, 361), (124, 362), (124, 363), (124, 364), (124, 365), (124, 366), (124, 367), (124, 368), (124, 369), (124, 370), (124, 371), (124, 372), (124, 373), (124, 374), (124, 375), (124, 376), (124, 377), (124, 378), (124, 379), (124, 380), (124, 381), (124, 382), (124, 383), (124, 384), (124, 385), (124, 386), (124, 387), (124, 388), (124, 389), (124, 390), (124, 391), (124, 392), (124, 393), (124, 394), (124, 395), (124, 396), (124, 397), (124, 398), (124, 399), (124, 400), (124, 401), (124, 402), (124, 403), (124, 404), (124, 405), (124, 406), (124, 407), (124, 408), (124, 409), (124, 410), (124, 411), (124, 412), (124, 413), (124, 414), (124, 415), (124, 416), (124, 417), (124, 418), (124, 419), (124, 420), (124, 421), (124, 422), (124, 423), (124, 424), (124, 425), (124, 426), (124, 427), (124, 428), (124, 429), (124, 430), (124, 431), (124, 432), (124, 433), (124, 434), (124, 435), (124, 436), (124, 437), (124, 438), (124, 439), (124, 440), (124, 441), (124, 442), (124, 443), (124, 444), (124, 445), (124, 446), (124, 447), (124, 448), (124, 449), (124, 450), (124, 451), (124, 452), (124, 453), (124, 454), (124, 455), (124, 456), (124, 457), (124, 458), (124, 459), (124, 460), (124, 461), (124, 462), (124, 463), (124, 464), (124, 465), (124, 466), (124, 467), (124, 468), (124, 469), (124, 470), (124, 471), (124, 472), (124, 473), (124, 474), (124, 475), (124, 476), (124, 477), (124, 478), (124, 479), (124, 480), (124, 481), (124, 482), (124, 483), (124, 484), (124, 485), (124, 486), (124, 487), (124, 488), (124, 489), (124, 490), (124, 491), (124, 492), (124, 493), (124, 494), (124, 495), (124, 496), (124, 497), (124, 498), (124, 499), (124, 500), (124, 501), (124, 502), (124, 503), (124, 504), (124, 505), (124, 506), (124, 507), (124, 508), (124, 509), (124, 510), (124, 511), (124, 512), (124, 513), (124, 514), (124, 515), (124, 516), (124, 517), (124, 518), (124, 519), (124, 520), (124, 521), (124, 522), (124, 523), (124, 524), (124, 525), (124, 526), (124, 527), (124, 528), (124, 529), (124, 530), (124, 531), (124, 532), (124, 533), (124, 534), (124, 535), (124, 536), (124, 537), (124, 538), (124, 539), (124, 540), (124, 541), (124, 542), (124, 543), (124, 544), (124, 545), (124, 546), (124, 547), (124, 548), (124, 549), (124, 550), (124, 551), (124, 552), (124, 553), (124, 554), (124, 555), (124, 556), (124, 557), (124, 558), (124, 559), (124, 560), (124, 561), (124, 562), (124, 563), (124, 564), (124, 565), (124, 566), (124, 567), (124, 568), (124, 569), (124, 570), (124, 571), (124, 572), (124, 573), (124, 574), (124, 575), (124, 576), (124, 577), (124, 578), (124, 579), (124, 580), (124, 581), (124, 582), (124, 583), (124, 584), (124, 585), (124, 586), (124, 587), (124, 588), (124, 589), (124, 590), (124, 591), (124, 592), (124, 593), (124, 594), (124, 595), (124, 596), (124, 597), (124, 598), (124, 599), (124, 600), (124, 601), (124, 602), (124, 603), (124, 604), (124, 605), (124, 606), (124, 607), (124, 608), (124, 609), (124, 610), (124, 611), (124, 612), (124, 613), (124, 614), (124, 615), (124, 616), (124, 617), (124, 618), (124, 619), (124, 620), (124, 621), (124, 622), (124, 623), (124, 624), (124, 625), (124, 626), (124, 627), (124, 628), (124, 629), (124, 630), (124, 631), (124, 632), (124, 633), (124, 634), (124, 635), (124, 636), (124, 637), (124, 638), (124, 639), (124, 640), (124, 641), (124, 642), (124, 643), (124, 644), (124, 645), (124, 646), (124, 647), (124, 648), (124, 649), (124, 650), (124, 651), (124, 652), (124, 653), (124, 654), (124, 655), (124, 656), (124, 657), (124, 658), (124, 659), (124, 660), (124, 661), (124, 662), (124, 663), (124, 664), (124, 665), (124, 666), (124, 667), (124, 668), (124, 669), (124, 670), (124, 671), (124, 672), (124, 673), (124, 674), (124, 675), (124, 676), (124, 677), (124, 678), (124, 679), (124, 680), (124, 681), (124, 682), (124, 683), (124, 684), (124, 685), (124, 686), (124, 687), (124, 688), (124, 689), (124, 690), (124, 691), (124, 692), (124, 693), (124, 694), (124, 695), (124, 696), (124, 697), (124, 698), (124, 699), (124, 700), (124, 701), (124, 702), (124, 703), (124, 704), (124, 705), (124, 706), (124, 707), (124, 708), (124, 709), (124, 710), (124, 711), (124, 712), (124, 713), (124, 714), (124, 715), (124, 716), (124, 717), (124, 718), (124, 719), (124, 720), (124, 721), (124, 722), (124, 723), (124, 724), (124, 725), (124, 726), (124, 727), (124, 728), (124, 729), (124, 730), (124, 731), (124, 732), (124, 733), (124, 734), (124, 735), (124, 736), (124, 737), (124, 738), (124, 739), (124, 740), (124, 741), (124, 742), (124, 743), (124, 744), (124, 745), (124, 746), (124, 747), (124, 748), (124, 749), (124, 750), (124, 751), (124, 752), (124, 753), (124, 754), (124, 755), (124, 756), (124, 757), (124, 758), (124, 759), (124, 760), (124, 761), (124, 762), (124, 763), (124, 764), (124, 765), (124, 766), (124, 767), (124, 768), (124, 769), (124, 770), (124, 771), (124, 772), (124, 773), (124, 774), (124, 775), (124, 776), (124, 777), (124, 778), (124, 779), (124, 780), (124, 781), (124, 782), (124, 783), (124, 784), (124, 785), (124, 786), (124, 787), (124, 788), (124, 789), (124, 790), (124, 791), (124, 792), (124, 793), (124, 794), (124, 795), (124, 796), (124, 797), (124, 798), (124, 799), (124, 800), (124, 801), (124, 802), (124, 803), (124, 804), (124, 805), (124, 806), (124, 807), (124, 808), (124, 809), (124, 810), (124, 811), (124, 812), (124, 813), (124, 814), (124, 815), (124, 816), (124, 817), (124, 818), (124, 819), (124, 820), (124, 821), (124, 822), (124, 823), (124, 824), (124, 825), (124, 826), (124, 827), (124, 828), (124, 829), (124, 830), (124, 831), (124, 832), (124, 833), (124, 834), (124, 835), (124, 836), (124, 837), (124, 838), (124, 839), (124, 840), (124, 841), (124, 842), (124, 843), (124, 844), (124, 845), (124, 846), (124, 847), (124, 848), (124, 849), (124, 850), (124, 851), (124, 852), (124, 853), (124, 854), (124, 855), (124, 856), (124, 857), (124, 858), (124, 859), (124, 860), (124, 861), (124, 862), (124, 863), (124, 864), (124, 865), (124, 866), (124, 867), (124, 868), (124, 869), (124, 870), (124, 871), (124, 872), (124, 873), (124, 874), (124, 875), (124, 876), (124, 877), (124, 878), (124, 879), (124, 880), (124, 881), (124, 882), (124, 883), (124, 884), (124, 885), (124, 886), (124, 887), (124, 888), (124, 889), (124, 890), (124, 891), (124, 892), (124, 893), (124, 894), (124, 895), (124, 896), (124, 897), (124, 898), (124, 899), (124, 900), (124, 901), (124, 902), (124, 903), (124, 904), (124, 905), (124, 906), (124, 907), (124, 908), (124, 909), (124, 910), (124, 911), (124, 912), (124, 913), (124, 914), (124, 915), (124, 916), (124, 917), (124, 918), (124, 919), (124, 920), (124, 921), (124, 922), (124, 923), (124, 924), (124, 925), (124, 926), (124, 927), (124, 928), (124, 929), (124, 930), (124, 931), (124, 932), (124, 933), (124, 934), (124, 935), (124, 936), (124, 937), (124, 938), (124, 939), (124, 940), (124, 941), (124, 942), (124, 943), (124, 944), (124, 945), (124, 946), (124, 947), (124, 948), (124, 949), (124, 950), (124, 951), (124, 952), (124, 953), (124, 954), (124, 955), (124, 956), (124, 957), (124, 958), (124, 959), (124, 960), (124, 961), (124, 962), (124, 963), (124, 964), (124, 965), (124, 966), (124, 967), (124, 968), (124, 969), (124, 970), (124, 971), (124, 972), (124, 973), (124, 974), (124, 975), (124, 976), (124, 977), (124, 978), (124, 979), (124, 980), (124, 981), (124, 982), (124, 983), (124, 984), (124, 985), (124, 986), (124, 987), (124, 988), (124, 989), (124, 990), (124, 991), (124, 992), (124, 993), (124, 994), (124, 995), (124, 996), (124, 997), (124, 998), (124, 999), (124, 1000), (124, 1001), (124, 1002), (124, 1003), (124, 1004), (124, 1005), (124, 1006), (124, 1007), (124, 1008), (124, 1009), (124, 1010), (124, 1011), (124, 1012), (124, 1013), (124, 1014), (124, 1015), (124, 1016), (124, 1017), (124, 1018), (124, 1019), (124, 1020), (124, 1021), (124, 1022), (124, 1023), (124, 1024), (124, 1025), (124, 1026), (124, 1027), (124, 1028), (124, 1029), (124, 1030), (124, 1031), (124, 1032), (124, 1033), (124, 1034), (124, 1035), (124, 1036), (124, 1037), (124, 1038), (124, 1039), (124, 1040), (124, 1041), (124, 1042), (124, 1043), (124, 1044), (124, 1045), (124, 1046), (124, 1047), (124, 1048), (124, 1049), (124, 1050), (124, 1051), (124, 1052), (124, 1053), (124, 1054), (124, 1055), (124, 1056), (124, 1057), (124, 1058), (124, 1059), (124, 1060), (124, 1061), (124, 1062), (124, 1063), (124, 1064), (124, 1065), (124, 1066), (124, 1067), (124, 1068), (124, 1069), (124, 1070), (124, 1071), (124, 1072), (124, 1073), (124, 1074), (124, 1075), (124, 1076), (124, 1077), (124, 1078), (124, 1079), (124, 1080), (124, 1081), (124, 1082), (124, 1083), (124, 1084), (124, 1085), (124, 1086), (124, 1087), (124, 1088), (124, 1089), (124, 1090), (124, 1091), (124, 1092), (124, 1093), (124, 1094), (124, 1095), (124, 1096), (124, 1097), (124, 1098), (124, 1099), (124, 1100), (124, 1101), (124, 1102), (124, 1103), (124, 1104), (124, 1105), (124, 1106), (124, 1107), (124, 1108), (124, 1109), (124, 1110), (124, 1111), (124, 1112), (124, 1113), (124, 1114), (124, 1115), (124, 1116), (124, 1117), (124, 1118), (124, 1119), (124, 1120), (124, 1121), (124, 1122), (124, 1123), (124, 1124), (124, 1125), (124, 1126), (124, 1127), (124, 1128), (124, 1129), (124, 1130), (124, 1131), (124, 1132), (124, 1133), (124, 1134), (124, 1135), (124, 1136), (124, 1137), (124, 1138), (124, 1139), (124, 1140), (124, 1141), (124, 1142), (124, 1143), (124, 1144), (124, 1145), (124, 1146), (124, 1147), (124, 1148), (124, 1149), (124, 1150), (124, 1151), (124, 1152), (124, 1153), (124, 1154), (124, 1155), (124, 1156), (124, 1157), (124, 1158), (124, 1159), (124, 1160), (124, 1161), (124, 1162), (124, 1163), (124, 1164), (124, 1165), (124, 1166), (124, 1167), (124, 1168), (124, 1169), (124, 1170), (124, 1171), (124, 1172), (124, 1173), (124, 1174), (124, 1175), (124, 1176), (124, 1177), (124, 1178), (124, 1179), (124, 1180), (124, 1181), (124, 1182), (124, 1183), (124, 1184), (124, 1185), (124, 1186), (124, 1187), (124, 1188), (124, 1189), (124, 1190), (124, 1191), (124, 1192), (124, 1193), (124, 1194), (124, 1195), (124, 1196), (124, 1197), (124, 1198), (124, 1199), (124, 1200), (124, 1201), (124, 1202), (124, 1203), (124, 1204), (124, 1205), (124, 1206), (124, 1207), (124, 1208), (124, 1209), (124, 1210), (124, 1211), (124, 1212), (124, 1213), (124, 1214), (124, 1215), (124, 1216), (124, 1217), (124, 1218), (124, 1219), (124, 1220), (124, 1221), (124, 1222), (124, 1223), (124, 1224), (124, 1225), (124, 1226), (124, 1227), (124, 1228), (124, 1229), (124, 1230), (124, 1231), (124, 1232), (124, 1233), (124, 1234), (124, 1235), (124, 1236), (124, 1237), (124, 1238), (124, 1239), (124, 1240), (124, 1241), (124, 1242), (124, 1243), (124, 1244), (124, 1245), (124, 1246), (124, 1247), (124, 1248), (124, 1249), (124, 1250), (124, 1251), (124, 1252), (124, 1253), (124, 1254), (124, 1255), (124, 1256), (124, 1257), (124, 1258), (124, 1259), (124, 1260), (124, 1261), (124, 1262), (124, 1263), (124, 1264), (124, 1265), (124, 1266), (124, 1267), (124, 1268), (124, 1269), (124, 1270), (124, 1271), (124, 1272), (124, 1273), (124, 1274), (124, 1275), (124, 1276), (124, 1277), (124, 1278), (124, 1279), (124, 1280), (124, 1281), (124, 1282), (124, 1283), (124, 1284), (124, 1285), (124, 1286), (124, 1287), (124, 1288), (124, 1289), (124, 1290), (124, 1291), (124, 1292), (124, 1293), (124, 1294), (124, 1295), (124, 1296), (124, 1297), (124, 1298), (124, 1299), (124, 1300), (124, 1301), (124, 1302), (124, 1303), (124, 1304), (124, 1305), (124, 1306), (124, 1307), (124, 1308), (124, 1309), (124, 1310), (124, 1311), (124, 1312), (124, 1313), (124, 1314), (124, 1315), (124, 1316), (124, 1317), (124, 1318), (124, 1319), (124, 1320), (124, 1321), (124, 1322), (124, 1323), (124, 1324), (124, 1325), (124, 1326), (124, 1327), (124, 1328), (124, 1329), (124, 1330), (124, 1331), (124, 1332), (124, 1333), (124, 1334), (124, 1335), (124, 1336), (124, 1337), (124, 1338), (124, 1339), (124, 1340), (124, 1341), (124, 1342), (124, 1343), (124, 1344), (124, 1345), (124, 1346), (124, 1347), (124, 1348), (124, 1349), (124, 1350), (124, 1351), (124, 1352), (124, 1353), (124, 1354), (124, 1355), (124, 1356), (124, 1357), (124, 1358), (124, 1359), (124, 1360), (124, 1361), (124, 1362), (124, 1363), (124, 1364), (124, 1365), (124, 1366), (124, 1367), (124, 1368), (124, 1369), (124, 1370), (124, 1371), (124, 1372), (124, 1373), (124, 1374), (124, 1375), (124, 1376), (124, 1377), (124, 1378), (124, 1379), (124, 1380), (124, 1381), (124, 1382), (124, 1383), (124, 1384), (124, 1385), (124, 1386), (124, 1387), (124, 1388), (124, 1389), (124, 1390), (124, 1391), (124, 1392), (124, 1393), (124, 1394), (124, 1395), (124, 1396), (124, 1397), (124, 1398), (124, 1399), (124, 1400), (124, 1401), (124, 1402), (124, 1403), (124, 1404), (124, 1405), (124, 1406), (124, 1407), (124, 1408), (124, 1409), (124, 1410), (124, 1411), (124, 1412), (124, 1413), (124, 1414), (124, 1415), (124, 1416), (124, 1417), (124, 1418), (124, 1419), (124, 1420), (124, 1421), (124, 1422), (124, 1423), (124, 1424), (124, 1425), (124, 1426), (124, 1427), (124, 1428), (124, 1429), (124, 1430), (124, 1431), (124, 1432), (124, 1433), (124, 1434), (124, 1435), (124, 1436), (124, 1437), (124, 1438), (124, 1439), (160, 1368), (164, 805), (195, 764), (212, 1319), (490, 844), (613, 1067), (664, 1051), (716, 771), (750, 1272), (1112, 1263), (1127, 1372), (1284, 850), (1592, 977), (1668, 876), (1797, 1130), (2005, 966), (2056, 1355), (2231, 772), (2296, 862), (2303, 651), (2345, 1376), (2345, 1377), (2345, 1378), (2345, 1379), (2345, 1380), (2345, 1381), (2345, 1384), (2362, 442), (2362, 443), (2362, 444), (2362, 445), (2362, 446), (2362, 447), (2362, 448), (2362, 449), (2362, 450), (2362, 451), (2362, 452), (2362, 453), (2362, 454), (2363, 169), (2366, 450), (2366, 451), (2366, 452), (2445, 454), (2475, 330), (2582, 1261), (2592, 366), (2592, 372), (2592, 374), (2652, 766), (2731, 1085), (2737, 810), (2795, 1402), (2800, 950), (2882, 860), (2888, 905), (2888, 908), (2918, 966), (2993, 204), (3007, 804), (3126, 1377), (3167, 908), (3180, 1109), (3208, 932), (3274, 521), (3288, 939), (3345, 1432), (3352, 900), (3361, 1086), (3372, 859), (3391, 803), (3412, 395), (3528, 403), (3607, 1372), (3676, 1277), (3714, 463), (3756, 1300), (3775, 903), (3775, 908), (3791, 454), (3804, 1082), (3837, 1078), (3956, 1261), (3982, 1276), (3994, 1085), (4045, 444), (4045, 445), (4045, 1139), (4092, 902), (4103, 686), (4129, 1327), (4133, 1360), (4175, 1085), (4187, 1270), (4200, 392), (4212, 464), (4281, 1427), (4301, 50)]
#
# result = sild_window.group_by_first_elem(contact_ans)
# print(result)
# ans = []
# for i in result:
#     temp = sild_window.sliding_window(i, 5)
#     if temp is not None and temp is not False:
#         ans.append(temp)
# print(ans)
# ===========================================基本方案封装之后的函数==========================
# 根据查询轨迹生成查询编码 （陷门）
def trapdoor(file_name, d):
    # 根据查询轨迹生成查询编码 （陷门）
    l_q = file_process.read_dataset(fr"C:\Users\陆取\Desktop\dataset\taxi_rename\{file_name}.txt")
    # l_q = file_process.read_dataset(fr"C:\Users\陆取\Desktop\dataset\TDrive_rename\{file_name}.txt")
    l_q_1 = file_process.process_dataset(l_q)[0]  # 存的是经纬度
    Q = []  # 存放根据查询轨迹生成的hash码
    for dot in l_q_1:  # 对每个点进行编码操作
        Q_temp = []
        x1 = Project.project_dot(dot, Project.encrypt_vectors_m11, d)
        x2 = Project.project_dot(dot, Project.encrypt_vectors_m11_rotate1, d)
        # x3 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_2, d)
        # x4 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_3, d)
        # x5 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_4, d)
        c = zip(x1, x2)
        # c = zip(x1, x2, x3, x4, x5)
        c = list(c)
        # print(dot)
        # print(c)
        hm1 = []
        hm2 = []
        for i in c:
            temp1 = Project.HMAC_md5(Project.key, i[0])
            hm1.append(temp1)
            temp2 = Project.HMAC_md5(Project.key, i[1])
            hm2.append(temp2)
            # temp3 = Project.HMAC_md5(Project.key, i[2])
            # temp4 = Project.HMAC_md5(Project.key, i[3])
            # temp5 = Project.HMAC_md5(Project.key, i[4])
            temp = temp1 + temp2
            # temp = temp1 + temp2 + temp3 + temp4 + temp5
            Q_temp.append(temp)
        Q.append(Q_temp)
    return Q
    # print(Q)
    # print(Q[0])
    # print(Q[0][0])#


# 基本查询方案
def base_s(Q):
    import time as tm
    # 开始到所有对象的编码集中遍历查询
    contact_ans = []  # 用来存放最后的查询结果
    execution_time = 0
    for i in range(1, 4316):  # 读一个查一个，不要一次性把所有的都读完，不然内存占用太大。
        # l = []  # 用来存放读出来的轨迹编码
        # l_r = []  # 用来存放处理好一个点后的编码
        l_e = []  # 存放所有点最后处理好的编码
        l = file_process.read_dataset(
            fr'D:\A研究生\研1\实验\编码集\v=2\m=11\code_hash_28m\code_hash{i}')  # 读取对应对象所有时刻的hash码
        # print(l)

        start_time = tm.time()
        for j in l:  # 对读出的一个对象数据处理，只要后面的编码部分
            result = j.split("：")[-1].strip()
            l_e.append(result)
        # print(l_e[0])
        # print(type(l_e[0]))
        # l_e[0] = l_e[0].strip("[]").replace("[]", "").split(",")
        # print(l_e[0])
        # print(l_e[0][0].strip("'"))
        for f in range(1440):  # 这里的f为第f时刻轨迹点的编码列表，每个轨迹点列表有m个元素
            flag = 0
            l_e[f] = l_e[f].strip("[]").replace(" ", "").split(",")
            for f_f in range(len(Q[f])):  # 这里的f_f为编码集合中的第几个
                # print(Q[f][f_f])
                # print(l_e[f][f_f].strip("'"))
                # print(f,f_f)
                if Q[f][f_f] == l_e[f][f_f].strip("'"):
                    flag = 1
                    # print(f'第{i}个对象，第{f}时刻，集合中第{f_f}个编码一致')
                    contact_ans.append([i, f])
        end_time = tm.time()
        execution_time += end_time - start_time
        # break  #  这个地方可以优化的
        # print(f'{i / 4315 * 100}%')
        # break
    # print(contact_ans)
    contact_ans = sorted(list(set(tuple(i) for i in contact_ans)), key=lambda x: contact_ans.index(list(x)))
    # print(contact_ans)
    # print(len(contact_ans))
    # print("======================开始利用滑动窗口寻找================================")
    result = sild_window.group_by_first_elem(contact_ans)
    # print(result)
    ans = []
    for i in result:
        temp = sild_window.sliding_window(i, 5)
        if temp is not None and temp is not False:
            ans.append(temp)
    return ans, execution_time


print("===================================================================")


# =====================================优化方案--hashtree查询===============================================
def trapdoor_hash_tree(file_name, d):
    """
    生成索引树查询的编码，是转换成16进制后的编码
    :param file_name: 作为密接源的轨迹名
    :param d: 密接距离阈值
    :return: 返回生成的查询陷门
    """
    # 根据查询轨迹生成查询编码 （陷门）
    l_q = file_process.read_dataset(fr"C:\Users\陆取\Desktop\dataset\taxi_rename\{file_name}.txt")
    # l_q = file_process.read_dataset(fr"C:\Users\陆取\Desktop\dataset\TDrive_rename\{file_name}.txt")
    l_q_1 = file_process.process_dataset(l_q)[0]  # 存的是经纬度
    Q = []  # 存放根据查询轨迹生成的hash码
    for dot in l_q_1:  # 对每个点进行编码操作
        Q_temp = []
        x1 = Project.project_dot(dot, Project.encrypt_vectors_m14, d)
        x2 = Project.project_dot(dot, Project.encrypt_vectors_m14_rotate1, d)
        # x3 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_2, d)
        # x4 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_3, d)
        # x5 = Project.project_dot(dot, Project.encrypt_vectors_rotate_v5_4, d)
        c = zip(x1, x2)
        # c = zip(x1, x2, x3, x4, x5)
        c = list(c)
        # print(dot)
        # print(c)
        hm1 = []
        hm2 = []
        for i in c:
            temp1 = Project.HMAC_md5(Project.key, i[0])
            hm1.append(temp1)
            temp2 = Project.HMAC_md5(Project.key, i[1])
            hm2.append(temp2)
            # temp3 = Project.HMAC_md5(Project.key, i[2])
            # temp4 = Project.HMAC_md5(Project.key, i[3])
            # temp5 = Project.HMAC_md5(Project.key, i[4])
            temp = temp1 + temp2  # 这步得出的应该是hash码
            # temp = temp1 + temp2 + temp3 + temp4 + temp5
            temp = int(temp, 16)
            Q_temp.append(temp)
        Q.append(Q_temp)
    return Q


def tree_s(Q, tree_name, index, matrix):
    """
    索引树查询方案,这个函数只是查询一棵树
    :param Q: 查询陷门
    :param tree_name: 查询树名
    :param index: 根据查询的树确定查询的是一个点的编码集中的第几个编码
    :param matrix: 判断矩阵
    :return: 返回密接对象
    """
    import time as tm
    # 开始到索引树中查询
    s_t = 0  # 查询陷门的时刻
    hash_tree_load = file_process.load_hash_tree(fr'D:\A研究生\研1\实验\编码集\hash_tree\m=14\d=16.8', tree_name)
    start_time = tm.time()
    execution_time = 0
    for i in Q:
        ans = hash_tree_load.search(hash_tree_load.root, i[index - 1])
        if ans is not None:
            for j in ans:
                obj = j[0]
                time = j[1]
                if time == s_t:
                    matrix[obj - 1][time] = 1
        s_t += 1
    end_time = tm.time()
    execution_time += end_time - start_time
    return matrix, execution_time


def hash_tree_search(Q, tree_list):
    """
    根据要查询的数列表进行查询，最后返回密接对象结果
    :param Q: 查询陷门
    :param tree_list: 要查询的树列表
    :return: 返回密接对象查询结果
    """
    temp = []
    contact_ans = set()
    run_time = 0
    matrix = sild_window.generate_large_matrix(4315, 1440)
    for tree_name in tree_list:
        # index = int(tree_name[-1])
        index = int(tree_name.split("ee")[-1])
        matrix, time_temp = tree_s(Q, tree_name, index, matrix)
        run_time += time_temp
    contact = sild_window.find_rows_with_consecutive_ones(matrix, 5)
    temp.append(contact)
    for i in temp:
        for j in i:
            contact_ans.add(j)
    contact_ans = sorted(contact_ans)
    # print(sorted(contact_ans))
    # print(run_time1)
    return contact_ans, run_time


# =====================================明文查询，直接计算距离的===============================================
# 明文下逐个从查找函数，用来验证正确率
def plaint_s(file_name):
    import time as tm
    execution_time = 0
    l_plaint_q = file_process.read_dataset(fr"C:\Users\陆取\Desktop\dataset\taxi_rename\{file_name}.txt")
    # l_plaint_q = file_process.read_dataset(fr"C:\Users\陆取\Desktop\dataset\TDrive_rename\{file_name}.txt")
    l_plaint_q_xy = file_process.process_dataset(l_plaint_q)[0]
    # print(l_plaint_q_xy)
    # print(l_plaint_q_xy[0])
    # print("--------")
    l_plaint_e = []  # 用来存放最终符合条件的对象
    for i in range(1, 4316):  # 最外层循环，确定的是哪个对象
        l_plaint = file_process.read_dataset(fr'C:\Users\陆取\Desktop\dataset\taxi_rename\{i}.txt')
        # l_plaint = file_process.read_dataset(fr'C:\Users\陆取\Desktop\dataset\TDrive_rename\{i}.txt')
        l_plaint = file_process.process_dataset(l_plaint)[0]
        # print(l_plaint)
        # print(l_plaint[0])
        start_time = tm.time()
        l_plaint_temp = []
        for j in range(len(l_plaint)):  # 内层循环，确定哪个点
            ans = Project.distance_ed(l_plaint_q_xy[j][0], l_plaint_q_xy[j][1], l_plaint[j][0], l_plaint[j][1])
            ans = math.floor(ans * 1000)
            if ans <= 20:
                l_plaint_temp.append([i, j])
                # print(f"第{i}个对象，第{j}个点,距离为{ans}")
        l_plaint_temp = sorted(list(set(tuple(i) for i in l_plaint_temp)), key=lambda x: l_plaint_temp.index(list(x)))
        # print(l_plaint_temp)
        temp = sild_window.sliding_window(l_plaint_temp, 5)
        if temp is not None and temp is not False:
            l_plaint_e.append(temp)
        # print(f'{i / 4315 * 100}%')
        end_time = tm.time()
        execution_time += end_time - start_time
    return l_plaint_e, execution_time


# ===================测试指定对象的查询结果=======================================
# start_time1 = time.time()
# a = plaint_s(1)
# end_time1 = time.time()
# run_time1 = end_time1 - start_time1
# start_time2 = time.time()
# Q = trapdoor(1, d)
# b = base_s(Q)
# end_time2 = time.time()
# run_time2 = end_time2 - start_time2
# if a == b:
#     jud = "正确"
# else:
#     miss1 = set(a) - set(b)
#     miss2 = set(b) - set(a)
#     jud = f"缺失{miss1},误判{miss2}"
# print(f'正确率：{jud},{1}作为查询轨迹,明文查找结果：{a},明文查找时间：{run_time1},基本方案查找结果{b},基本方案时间：{run_time2},'
#       f'总进度{1 / 4314 * 100}%')
# ==========================================================
# 测试选取各个对象作为查询点的结果（明文查询和基础方案对比实验用部分）
count = 0
with open(r'D:\A研究生\研1\实验\结果\v=2\放大系数\m=11,d=28,s=5,r=20_time.txt', 'a') as f:
    for i in range(1, 101):
        # start_time1 = time.time()
        a,run_time1 = plaint_s(i)
        # end_time1 = time.time()
        # run_time1 = end_time1 - start_time1
        # start_time2 = time.time()
        Q = trapdoor(i, d)
        b, run_time2 = base_s(Q)
        # end_time2 = time.time()
        # run_time2 = end_time2 - start_time2
        if a == b:
            jud = "正确"
        else:
            miss1 = set(a) - set(b)
            miss2 = set(b) - set(a)
            jud = f"缺失{miss1},误判{miss2}"
        count += 1
        fw = f'结果：{jud},{i}作为查询轨迹,明文查找结果：{a},明文查找时间：{run_time1},基本方案查找结果{b},基本方案时间：{run_time2},' \
             f'总进度{count / 100 * 100}%\n'
        print(fw)
        f.write(fw)
        # break
# ==========================================================
# 测试选取各个对象作为查询点的结果（明文查询和优化方案对比实验用部分）
# count = 0
# with open(r'D:\A研究生\研1\实验\结果\hashtree\放大系数\m=14,d=16.8,s=5,r=12_time.txt', 'a') as f:
#     for i in range(1, 31):
#         # start_time1 = time.time()
#         a,run_time1 = plaint_s(i)
#         # end_time1 = time.time()
#         # run_time1 = end_time1 - start_time1
#         # tree_list = ["tree1", "tree2"]  # m为2的时候使用这个
#         # tree_list = ["tree1", "tree2", "tree3", "tree4", "tree5"]  # m为5的时候使用这个
#         # tree_list = ["tree1", "tree2", "tree3", "tree4", "tree5", "tree6", "tree7", "tree8"]  # m为8的时候使用这个
#         # tree_list = ["tree1", "tree2", "tree3", "tree4", "tree5", "tree6", "tree7", "tree8", "tree9", "tree10",
#         #              "tree11"]  # m为11的时候使用这个
#         tree_list = ["tree1", "tree2", "tree3", "tree4", "tree5", "tree6", "tree7", "tree8", "tree9", "tree10",
#                              "tree11", "tree12", "tree13", "tree14"]  # m为14的时候使用这个
#         Q = trapdoor_hash_tree(i, d)  # 生成查询陷门
#         b = hash_tree_search(Q, tree_list)  # 搜索
#         b_contact = b[0]
#         b_time = b[1]
#         if a == b_contact:
#             jud = "正确"
#         else:
#             miss1 = set(a) - set(b_contact)
#             miss2 = set(b_contact) - set(a)
#             jud = f"缺失{miss1},误判{miss2}"
#         count += 1
#         fw = f'结果：{jud},{i}作为查询轨迹,明文查找结果：{a},明文查找时间：{run_time1},优化方案查找结果{b_contact},优化方案时间：{b_time},' \
#              f'总进度{count / 30 * 100}%\n'
#         print(fw)
#         f.write(fw)
